{
  "name": "Android优化",
  "tagline": "Android App优化之ANR详解",
  "body": "引言\r\n背景:Android App优化, 要怎么做?\r\nAndroid App优化之性能分析工具\r\nAndroid App优化之提升你的App启动速度之理论基础\r\nAndroid App优化之提升你的App启动速度之实例挑战\r\nAndroid App优化之Layout怎么摆\r\nAndroid App优化之ANR详解\r\nAndroid App优化之消除卡顿\r\nAndroid App优化之内存优化\r\nAndroid App优化之持久电量\r\nAndroid App优化之如何高效网络请求\r\nApp优化系列已近中期, 前面分享了一些工具, 理论, 也结合了案例谈了下启动优化, 布局分析等.\r\n\r\n原计划将本文作为这个系列的一个承上启下点, 对前面几篇作一个小总结, 聊聊App流畅度和快速响应的话题.\r\n\r\n粗一缕, 发现内容还是很多, 暂且拆成几篇来慢慢写吧, 勿怪~\r\n\r\n今天先来聊聊ANR.\r\n\r\n1, 你碰到ANR了吗\r\n在App使用过程中, 你可能遇到过这样的情况:\r\n\r\n\r\nANR\r\n恭喜你, 这就是传说中的ANR.\r\n\r\n1.1 何为ANR\r\nANR全名Application Not Responding, 也就是\"应用无响应\". 当操作在一段时间内系统无法处理时, 系统层面会弹出上图那样的ANR对话框.\r\n\r\n1.2 为什么会产生ANR\r\n在Android里, App的响应能力是由Activity Manager和Window Manager系统服务来监控的. 通常在如下两种情况下会弹出ANR对话框:\r\n\r\n5s内无法响应用户输入事件(例如键盘输入, 触摸屏幕等).\r\nBroadcastReceiver在10s内无法结束.\r\n造成以上两种情况的首要原因就是在主线程(UI线程)里面做了太多的阻塞耗时操作, 例如文件读写, 数据库读写, 网络查询等等.\r\n\r\n1.3 如何避免ANR\r\n知道了ANR产生的原因, 那么想要避免ANR, 也就很简单了, 就一条规则:\r\n\r\n不要在主线程(UI线程)里面做繁重的操作.\r\n这里面实际上涉及到两个问题:\r\n\r\n哪些地方是运行在主线程的?\r\n不在主线程做, 在哪儿做?\r\n稍后解答.\r\n\r\n2, ANR分析\r\n2.1 获取ANR产生的trace文件\r\nANR产生时, 系统会生成一个traces.txt的文件放在/data/anr/下. 可以通过adb命令将其导出到本地:\r\n\r\n$adb pull data/anr/traces.txt .\r\n2.2 分析traces.txt\r\n2.2.1 普通阻塞导致的ANR\r\n获取到的tracs.txt文件一般如下:\r\n\r\n如下以GithubApp代码为例, 强行sleep thread产生的一个ANR.\r\n----- pid 2976 at 2016-09-08 23:02:47 -----\r\nCmd line: com.anly.githubapp  // 最新的ANR发生的进程(包名)\r\n\r\n...\r\n\r\nDALVIK THREADS (41):\r\n\"main\" prio=5 tid=1 Sleeping\r\n  | group=\"main\" sCount=1 dsCount=0 obj=0x73467fa8 self=0x7fbf66c95000\r\n  | sysTid=2976 nice=0 cgrp=default sched=0/0 handle=0x7fbf6a8953e0\r\n  | state=S schedstat=( 0 0 0 ) utm=60 stm=37 core=1 HZ=100\r\n  | stack=0x7ffff4ffd000-0x7ffff4fff000 stackSize=8MB\r\n  | held mutexes=\r\n  at java.lang.Thread.sleep!(Native method)\r\n  - sleeping on <0x35fc9e33> (a java.lang.Object)\r\n  at java.lang.Thread.sleep(Thread.java:1031)\r\n  - locked <0x35fc9e33> (a java.lang.Object)\r\n  at java.lang.Thread.sleep(Thread.java:985) // 主线程中sleep过长时间, 阻塞导致无响应.\r\n  at com.tencent.bugly.crashreport.crash.c.l(BUGLY:258)\r\n  - locked <@addr=0x12dadc70> (a com.tencent.bugly.crashreport.crash.c)\r\n  at com.tencent.bugly.crashreport.CrashReport.testANRCrash(BUGLY:166)  // 产生ANR的那个函数调用\r\n  - locked <@addr=0x12d1e840> (a java.lang.Class<com.tencent.bugly.crashreport.CrashReport>)\r\n  at com.anly.githubapp.common.wrapper.CrashHelper.testAnr(CrashHelper.java:23)\r\n  at com.anly.githubapp.ui.module.main.MineFragment.onClick(MineFragment.java:80) // ANR的起点\r\n  at com.anly.githubapp.ui.module.main.MineFragment_ViewBinding$2.doClick(MineFragment_ViewBinding.java:47)\r\n  at butterknife.internal.DebouncingOnClickListener.onClick(DebouncingOnClickListener.java:22)\r\n  at android.view.View.performClick(View.java:4780)\r\n  at android.view.View$PerformClick.run(View.java:19866)\r\n  at android.os.Handler.handleCallback(Handler.java:739)\r\n  at android.os.Handler.dispatchMessage(Handler.java:95)\r\n  at android.os.Looper.loop(Looper.java:135)\r\n  at android.app.ActivityThread.main(ActivityThread.java:5254)\r\n  at java.lang.reflect.Method.invoke!(Native method)\r\n  at java.lang.reflect.Method.invoke(Method.java:372)\r\n  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)\r\n  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)\r\n拿到trace信息, 一切好说.\r\n如上trace信息中的添加的中文注释已基本说明了trace文件该怎么分析:\r\n\r\n文件最上的即为最新产生的ANR的trace信息.\r\n前面两行表明ANR发生的进程pid, 时间, 以及进程名字(包名).\r\n寻找我们的代码点, 然后往前推, 看方法调用栈, 追溯到问题产生的根源.\r\n以上的ANR trace是属于相对简单, 还有可能你并没有在主线程中做过于耗时的操作, 然而还是ANR了. 这就有可能是如下两种情况了:\r\n2.2.2 CPU满负荷\r\n这个时候你看到的trace信息可能会包含这样的信息:\r\n\r\nProcess:com.anly.githubapp\r\n...\r\nCPU usage from 3330ms to 814ms ago:\r\n6% 178/system_server: 3.5% user + 1.4% kernel / faults: 86 minor 20 major\r\n4.6% 2976/com.anly.githubapp: 0.7% user + 3.7% kernel /faults: 52 minor 19 major\r\n0.9% 252/com.android.systemui: 0.9% user + 0% kernel\r\n...\r\n\r\n100%TOTAL: 5.9% user + 4.1% kernel + 89% iowait\r\n最后一句表明了:\r\n\r\n当是CPU占用100%, 满负荷了.\r\n其中绝大数是被iowait即I/O操作占用了.\r\n此时分析方法调用栈, 一般来说会发现是方法中有频繁的文件读写或是数据库读写操作放在主线程来做了.\r\n\r\n2.2.3 内存原因\r\n其实内存原因有可能会导致ANR, 例如如果由于内存泄露, App可使用内存所剩无几, 我们点击按钮启动一个大图片作为背景的activity, 就可能会产生ANR, 这时trace信息可能是这样的:\r\n\r\n// 以下trace信息来自网络, 用来做个示例\r\nCmdline: android.process.acore\r\n\r\nDALVIK THREADS:\r\n\"main\"prio=5 tid=3 VMWAIT\r\n|group=\"main\" sCount=1 dsCount=0 s=N obj=0x40026240self=0xbda8\r\n| sysTid=1815 nice=0 sched=0/0 cgrp=unknownhandle=-1344001376\r\natdalvik.system.VMRuntime.trackExternalAllocation(NativeMethod)\r\natandroid.graphics.Bitmap.nativeCreate(Native Method)\r\natandroid.graphics.Bitmap.createBitmap(Bitmap.java:468)\r\natandroid.view.View.buildDrawingCache(View.java:6324)\r\natandroid.view.View.getDrawingCache(View.java:6178)\r\n\r\n...\r\n\r\nMEMINFO in pid 1360 [android.process.acore] **\r\nnative dalvik other total\r\nsize: 17036 23111 N/A 40147\r\nallocated: 16484 20675 N/A 37159\r\nfree: 296 2436 N/A 2732\r\n可以看到free的内存已所剩无几.\r\n\r\n当然这种情况可能更多的是会产生OOM的异常...\r\n2.2 ANR的处理\r\n针对三种不同的情况, 一般的处理情况如下\r\n\r\n主线程阻塞的\r\n开辟单独的子线程来处理耗时阻塞事务.\r\n\r\nCPU满负荷, I/O阻塞的\r\nI/O阻塞一般来说就是文件读写或数据库操作执行在主线程了, 也可以通过开辟子线程的方式异步执行.\r\n\r\n内存不够用的\r\n增大VM内存, 使用largeHeap属性, 排查内存泄露(这个在内存优化那篇细说吧)等.\r\n\r\n3, 深入一点\r\n没有人愿意在出问题之后去解决问题.\r\n高手和新手的区别是, 高手知道怎么在一开始就避免问题的发生. 那么针对ANR这个问题, 我们需要做哪些层次的工作来避免其发生呢?\r\n\r\n3.1 哪些地方是执行在主线程的\r\nActivity的所有生命周期回调都是执行在主线程的.\r\nService默认是执行在主线程的.\r\nBroadcastReceiver的onReceive回调是执行在主线程的.\r\n没有使用子线程的looper的Handler的handleMessage, post(Runnable)是执行在主线程的.\r\nAsyncTask的回调中除了doInBackground, 其他都是执行在主线程的.\r\nView的post(Runnable)是执行在主线程的.\r\n3.2 使用子线程的方式有哪些\r\n上面我们几乎一直在说, 避免ANR的方法就是在子线程中执行耗时阻塞操作. 那么在Android中有哪些方式可以让我们实现这一点呢.\r\n\r\n3.2.1 启Thread方式\r\n这个其实也是Java实现多线程的方式. 有两种实现方法, 继承Thread 或 实现Runnable接口:\r\n\r\n继承Thread\r\n\r\nclass PrimeThread extends Thread {\r\n    long minPrime;\r\n    PrimeThread(long minPrime) {\r\n        this.minPrime = minPrime;\r\n    }\r\n\r\n    public void run() {\r\n        // compute primes larger than minPrime\r\n         . . .\r\n    }\r\n}\r\n\r\nPrimeThread p = new PrimeThread(143);\r\np.start();\r\n实现Runnable接口\r\n\r\nclass PrimeRun implements Runnable {\r\n    long minPrime;\r\n    PrimeRun(long minPrime) {\r\n        this.minPrime = minPrime;\r\n    }\r\n\r\n    public void run() {\r\n        // compute primes larger than minPrime\r\n         . . .\r\n    }\r\n}\r\n\r\nPrimeRun p = new PrimeRun(143);\r\nnew Thread(p).start();\r\n3.2.2 使用AsyncTask\r\n这个是Android特有的方式, AsyncTask顾名思义, 就是异步任务的意思.\r\n\r\nprivate class DownloadFilesTask extends AsyncTask<URL, Integer, Long> {\r\n    // Do the long-running work in here\r\n    // 执行在子线程\r\n    protected Long doInBackground(URL... urls) {\r\n        int count = urls.length;\r\n        long totalSize = 0;\r\n        for (int i = 0; i < count; i++) {\r\n            totalSize += Downloader.downloadFile(urls[i]);\r\n            publishProgress((int) ((i / (float) count) * 100));\r\n            // Escape early if cancel() is called\r\n            if (isCancelled()) break;\r\n        }\r\n        return totalSize;\r\n    }\r\n\r\n    // This is called each time you call publishProgress()\r\n    // 执行在主线程\r\n    protected void onProgressUpdate(Integer... progress) {\r\n        setProgressPercent(progress[0]);\r\n    }\r\n\r\n    // This is called when doInBackground() is finished\r\n    // 执行在主线程\r\n    protected void onPostExecute(Long result) {\r\n        showNotification(\"Downloaded \" + result + \" bytes\");\r\n    }\r\n}\r\n\r\n// 启动方式\r\nnew DownloadFilesTask().execute(url1, url2, url3);\r\n3.2.3 HandlerThread\r\nAndroid中结合Handler和Thread的一种方式. 前面有云, 默认情况下Handler的handleMessage是执行在主线程的, 但是如果我给这个Handler传入了子线程的looper, handleMessage就会执行在这个子线程中的. HandlerThread正是这样的一个结合体:\r\n\r\n// 启动一个名为new_thread的子线程\r\nHandlerThread thread = new HandlerThread(\"new_thread\");\r\nthread.start();\r\n\r\n// 取new_thread赋值给ServiceHandler\r\nprivate ServiceHandler mServiceHandler;\r\nmServiceLooper = thread.getLooper();\r\nmServiceHandler = new ServiceHandler(mServiceLooper);\r\n\r\nprivate final class ServiceHandler extends Handler {\r\n    public ServiceHandler(Looper looper) {\r\n      super(looper);\r\n    }\r\n\r\n    @Override\r\n    public void handleMessage(Message msg) {\r\n      // 此时handleMessage是运行在new_thread这个子线程中了.\r\n    }\r\n}\r\n3.2.4 IntentService\r\nService是运行在主线程的, 然而IntentService是运行在子线程的.\r\n实际上IntentService就是实现了一个HandlerThread + ServiceHandler的模式.\r\n\r\n以上HandlerThread的使用代码示例也就来自于IntentService源码.\r\n\r\n3.2.5 Loader\r\nAndroid 3.0引入的数据加载器, 可以在Activity/Fragment中使用. 支持异步加载数据, 并可监控数据源在数据发生变化时传递新结果. 常用的有CursorLoader, 用来加载数据库数据.\r\n\r\n// Prepare the loader.  Either re-connect with an existing one,\r\n// or start a new one.\r\n// 使用LoaderManager来初始化Loader\r\ngetLoaderManager().initLoader(0, null, this);\r\n\r\n//如果 ID 指定的加载器已存在，则将重复使用上次创建的加载器。\r\n//如果 ID 指定的加载器不存在，则 initLoader() 将触发 LoaderManager.LoaderCallbacks 方法 //onCreateLoader()。在此方法中，您可以实现代码以实例化并返回新加载器\r\n\r\n// 创建一个Loader\r\npublic Loader<Cursor> onCreateLoader(int id, Bundle args) {\r\n    // This is called when a new Loader needs to be created.  This\r\n    // sample only has one Loader, so we don't care about the ID.\r\n    // First, pick the base URI to use depending on whether we are\r\n    // currently filtering.\r\n    Uri baseUri;\r\n    if (mCurFilter != null) {\r\n        baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,\r\n                  Uri.encode(mCurFilter));\r\n    } else {\r\n        baseUri = Contacts.CONTENT_URI;\r\n    }\r\n\r\n    // Now create and return a CursorLoader that will take care of\r\n    // creating a Cursor for the data being displayed.\r\n    String select = \"((\" + Contacts.DISPLAY_NAME + \" NOTNULL) AND (\"\r\n            + Contacts.HAS_PHONE_NUMBER + \"=1) AND (\"\r\n            + Contacts.DISPLAY_NAME + \" != '' ))\";\r\n    return new CursorLoader(getActivity(), baseUri,\r\n            CONTACTS_SUMMARY_PROJECTION, select, null,\r\n            Contacts.DISPLAY_NAME + \" COLLATE LOCALIZED ASC\");\r\n}\r\n\r\n// 加载完成\r\npublic void onLoadFinished(Loader<Cursor> loader, Cursor data) {\r\n    // Swap the new cursor in.  (The framework will take care of closing the\r\n    // old cursor once we return.)\r\n    mAdapter.swapCursor(data);\r\n}\r\n具体请参看官网Loader介绍.\r\n\r\n3.2.6 特别注意\r\n使用Thread和HandlerThread时, 为了使效果更好, 建议设置Thread的优先级偏低一点:\r\n\r\nProcess.setThreadPriority(THREAD_PRIORITY_BACKGROUND);\r\n因为如果没有做任何优先级设置的话, 你创建的Thread默认和UI Thread是具有同样的优先级的, 你懂的. 同样的优先级的Thread, CPU调度上还是可能会阻塞掉你的UI Thread, 导致ANR的.\r\n\r\n结语\r\n对于ANR问题, 个人认为还是预防为主, 认清代码中的阻塞点, 善用线程. 同时形成良好的编程习惯, 要有MainThread和Worker Thread的概念的...(实际上人的工作状态也是这样的~~哈哈)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}